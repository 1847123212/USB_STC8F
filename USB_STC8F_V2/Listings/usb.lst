C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE USB
OBJECT MODULE PLACED IN .\Objects\usb.obj
COMPILER INVOKED BY: C:\Program Files\Keil C\C51\C51\BIN\C51.EXE USB\Src\usb.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Us
                    -er\Inc;.\Drivers\Inc;.\USB\Inc) DEBUG PRINT(.\Listings\usb.lst) TABS(2) OBJECT(.\Objects\usb.obj)

line level    source

   1          
   2          // Written By : Thanh Tung
   3          // E-Mail     : electricthanhtung@gmail.com
   4          // Facebook   : https://www.facebook.com/electricthanhtung
   5          
   6          #include "main.h"
   7          #include "usb.h"
   8          #include "usb_desc.h"
   9          
  10          volatile unsigned char data usb_rx_buffer[16];
  11          volatile unsigned char xdata usb_tx_buffer[16];
  12          volatile unsigned char xdata rx_buffer[16];
  13          volatile unsigned char data usb_tx_count = 0, usb_rx_count = 0;
  14          volatile unsigned char data UEPF = 1, UDRF = 1;
  15          volatile unsigned int xdata USB_TimerTick = 0;    // 20ms
  16          
  17          static data struct usb_type{
  18            volatile unsigned char state;
  19            volatile unsigned char event;
  20            volatile unsigned char device_address;
  21            
  22            volatile unsigned char received;
  23            volatile unsigned char ack;
  24            
  25            unsigned char endpoint;
  26            unsigned char setup_endpoint;
  27            
  28            unsigned int wLength;
  29          } usb = {0, 0, 0, 0, 0, 0, 0, 0xFF};
  30          
  31          static unsigned char xdata usb_data[250];
  32          
  33          extern void usb_send_ack();
  34          extern void usb_send_nack();
  35          
  36          static void usb_send_answer(){
  37   1        extern void usb_tx();
  38   1        P3 = (P3 & 0xFC) | 0x01;
  39   1        P3M0 |= 0x03;
  40   1        P3M1 &= ~0x03;
  41   1        usb_tx();
  42   1        P3M0 &= ~0x03;
  43   1        P3M1 |= 0x03;
  44   1      }
  45          
  46          static void usb_received_reentrant() reentrant {
  47   1        static unsigned char data data_count = 0, pid_data_old;
  48   1        UDRF = 0;
  49   1        if(usb_rx_buffer[1] == USB_PID_OUT){
  50   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  51   2          if((address == usb.device_address) || (address == 0)){
  52   3            usb.state = USB_STATE_OUT;
  53   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  54   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 2   

  55   3          }
  56   2        }
  57   1        else if(usb_rx_buffer[1] == USB_PID_SETUP){
  58   2          //usb.state = USB_STATE_SETUP;
  59   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  60   2          if((address == usb.device_address) || (address == 0)){
  61   3            usb.state = USB_STATE_SETUP;
  62   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  63   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  64   3          }
  65   2          return;
  66   2        }
  67   1        else switch(usb_rx_buffer[1]){
  68   2        case USB_PID_IN:{
  69   3          unsigned char address = usb_rx_buffer[2] & 0x7F;
  70   3          if((address != usb.device_address) && (address != 0))
  71   3            return;
  72   3          if(usb_tx_count){
  73   4            usb_send_answer();
  74   4            usb_tx_count = 0;
  75   4          }
  76   3      //    if(usb.event == USB_EVENT_READY_DATA_IN){
  77   3      //      usb_send_answer();
  78   3      //      usb.event = USB_EVENT_WAIT_DATA_IN;
  79   3      //    }
  80   3          else
  81   3            usb_send_nack();
  82   3          usb.state = USB_STATE_IN;
  83   3          break;
  84   3        }
  85   2        case USB_PID_DATA0:{
  86   3          if(usb.state == USB_STATE_OUT){
  87   4            if(pid_data_old == USB_PID_DATA1){
  88   5              unsigned char *buffer = &usb_data[data_count];
  89   5              buffer[0] = usb_rx_buffer[2];
  90   5              buffer[1] = usb_rx_buffer[3];
  91   5              buffer[2] = usb_rx_buffer[4];
  92   5              buffer[3] = usb_rx_buffer[5];
  93   5              buffer[4] = usb_rx_buffer[6];
  94   5              buffer[5] = usb_rx_buffer[7];
  95   5              usb_send_ack();
  96   5              buffer[6] = usb_rx_buffer[8];
  97   5              buffer[7] = usb_rx_buffer[9];
  98   5              data_count += 8;
  99   5              if(data_count >= usb.wLength){
 100   6                usb.received = 1;
 101   6                usb_tx_count = 0;
 102   6                UDRF = 1;
 103   6              }
 104   5              pid_data_old = USB_PID_DATA0;
 105   5            }
 106   4            else{
 107   5              delay_us(1);
 108   5              usb_send_ack();
 109   5            }
 110   4            usb.event = USB_EVENT_NO;
 111   4          }
 112   3          else if(usb.state == USB_STATE_SETUP){
 113   4            rx_buffer[2] = usb_rx_buffer[2];
 114   4            rx_buffer[3] = usb_rx_buffer[3];
 115   4            rx_buffer[4] = usb_rx_buffer[4];
 116   4            rx_buffer[5] = usb_rx_buffer[5];
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 3   

 117   4            rx_buffer[6] = usb_rx_buffer[6];
 118   4            rx_buffer[7] = usb_rx_buffer[7];
 119   4            rx_buffer[8] = usb_rx_buffer[8];
 120   4            pid_data_old = USB_PID_DATA0;
 121   4            data_count = 0;
 122   4            usb.event = USB_EVENT_RECEIVE_SETUP_DATA;
 123   4            UDRF = 1;
 124   4            usb_send_ack();
 125   4            
 126   4      //      wLength = usb_rx_buffer[9];
 127   4      //      wLength = (wLength << 8) | usb_rx_buffer[8];
 128   4            
 129   4            usb.wLength = usb_rx_buffer[8];
 130   4          }
 131   3          break;
 132   3        }
 133   2        case USB_PID_DATA1:
 134   2          if (usb.state == USB_STATE_OUT){
 135   3            if(usb_rx_count > 4){
 136   4              if(pid_data_old == USB_PID_DATA0){
 137   5                unsigned char *buffer = &usb_data[data_count];
 138   5                buffer[0] = usb_rx_buffer[2];
 139   5                buffer[1] = usb_rx_buffer[3];
 140   5                buffer[2] = usb_rx_buffer[4];
 141   5                buffer[3] = usb_rx_buffer[5];
 142   5                buffer[4] = usb_rx_buffer[6];
 143   5                buffer[5] = usb_rx_buffer[7];
 144   5                usb_send_ack();
 145   5                buffer[6] = usb_rx_buffer[8];
 146   5                buffer[7] = usb_rx_buffer[9];
 147   5                data_count += 8;
 148   5                if(data_count >= usb.wLength){
 149   6                  usb.received = 1;
 150   6                  usb_tx_count = 0;
 151   6                  UDRF = 1;
 152   6                }
 153   5                pid_data_old = USB_PID_DATA1;
 154   5              }
 155   4              else{
 156   5                delay_us(1);
 157   5                usb_send_ack();
 158   5              }
 159   4              usb.event = USB_EVENT_NO;
 160   4            }
 161   3            else{
 162   4              usb_tx_count = 0;
 163   4              delay_us(1);
 164   4              usb_send_ack();
 165   4            }
 166   3          }
 167   2          break;
 168   2        case USB_PID_ACK:
 169   2          usb.ack = 1;
 170   2          break;
 171   2        case USB_PID_NACK:
 172   2          break;
 173   2        default:
 174   2          usb.state = USB_STATE_IDLE;
 175   2          break;
 176   2        }
 177   1      }
 178          
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 4   

 179          void usb_received() {
 180   1        usb_received_reentrant();
 181   1      }
 182          
 183          static const unsigned char code usb_report_null[] = {
 184            0x00,
 185            0x00,
 186            0x00,
 187            0x00,
 188            0x00,
 189            0x00,
 190            0x00,
 191            0x00,
 192          };
 193          
 194          static const unsigned char code usb_string_descriptor_language[] = {
 195            4,
 196            USBDESCR_STRING,
 197            0x09, 0x04,
 198          };
 199          
 200          const unsigned int code table[] = {
 201            0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
 202            0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
 203            0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
 204            0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
 205            0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
 206            0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
 207            0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
 208            0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
 209            0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
 210            0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
 211            0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
 212            0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
 213            0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
 214            0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
 215            0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
 216            0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
 217            0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
 218            0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
 219            0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
 220            0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
 221            0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
 222            0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
 223            0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
 224            0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
 225            0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
 226            0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
 227            0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
 228            0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
 229            0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
 230            0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
 231            0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
 232            0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
 233          };
 234          
 235          void usb_calc_crc16(unsigned char length) reentrant {
 236   1        unsigned int crc = 0xFFFF;
 237   1        unsigned char i = 2;
 238   1        while(length--){
 239   2          crc = table[(crc ^ usb_tx_buffer[i]) & 0xFF] ^ (crc >> 8);
 240   2          i++;
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 5   

 241   2        }
 242   1        crc = ~crc;
 243   1        usb_tx_buffer[i] = crc;
 244   1        usb_tx_buffer[i + 1] = crc >> 8;
 245   1      }
 246          
 247          //static void usb_calc_crc16(unsigned char length){
 248          //  unsigned int data crc = 0xFFFF;
 249          //  unsigned char data index;
 250          //  for(index = 0; index < length; index++){
 251          //    unsigned char data i;
 252          //    crc ^= usb_tx_buffer[index + 2];
 253          //    for (i = 8; i--;){
 254          //      if (crc & 0x01){
 255          //        crc >>= 1;
 256          //        crc ^= 0xA001;
 257          //      }
 258          //      else
 259          //        crc >>= 1;
 260          //    }
 261          //  }
 262          //  crc = ~crc;
 263          //  usb_tx_buffer[index + 2] = (unsigned char)crc;
 264          //  usb_tx_buffer[index + 3] = (unsigned char)(crc >> 8);
 265          //}
 266          
 267          static unsigned char xdata data_sync;
 268          
 269          void USB_SendData(unsigned char *buffer, unsigned char length, unsigned char mode) reentrant {
 270   1        unsigned int timeStart;
 271   1        
 272   1        usb_tx_buffer[0] = 0x80;
 273   1        usb.state = USB_STATE_IN;
 274   1        if(mode)
 275   1          data_sync = USB_PID_DATA1;
 276   1        while (length > 0){
 277   2          usb_tx_buffer[1] = data_sync;
 278   2          if (data_sync == USB_PID_DATA1)
 279   2            data_sync = USB_PID_DATA0;
 280   2          else
 281   2            data_sync = USB_PID_DATA1;
 282   2          if(length >= 8){
 283   3            unsigned char i;
 284   3            for(i = 0; i < 8; i++)
 285   3              usb_tx_buffer[i + 2] = buffer[i];
 286   3            buffer += 8;
 287   3            usb_calc_crc16(8);
 288   3            usb_tx_count = 12;
 289   3            length -= 8;
 290   3          }
 291   2          else{
 292   3            unsigned char i;
 293   3            for(i = 2; i < (length + 2); i++)
 294   3              usb_tx_buffer[i] = *buffer++;
 295   3            usb_calc_crc16(length);
 296   3            usb_tx_count = length + 4;
 297   3            length = 0;
 298   3          }
 299   2          
 300   2          timeStart = USB_TimerTick;
 301   2          while(usb_tx_count){
 302   3            if(usb.state != USB_STATE_IN){
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 6   

 303   4              usb_tx_count = 0;
 304   4              return;
 305   4            }
 306   3            if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 307   4              usb_tx_count = 0;
 308   4              return;
 309   4            }
 310   3          }
 311   2          
 312   2      //    usb.event = USB_EVENT_READY_DATA_IN;
 313   2      //    while(usb.event != USB_EVENT_WAIT_DATA_IN);
 314   2        }
 315   1      }
 316          
 317          void USB_WriteBuf(unsigned char *buffer, unsigned char length) reentrant {
 318   1        unsigned char start = 0;
 319   1        unsigned int timeStart;
 320   1        usb_tx_buffer[0] = 0x80;
 321   1        data_sync = USB_PID_DATA1;
 322   1        while (length > 0){
 323   2          usb_tx_buffer[1] = data_sync;
 324   2          if (data_sync == USB_PID_DATA1)
 325   2            data_sync = USB_PID_DATA0;
 326   2          else
 327   2            data_sync = USB_PID_DATA1;
 328   2          
 329   2          if(!start){
 330   3            start = 1;
 331   3            usb_tx_buffer[2] = length;
 332   3            
 333   3            if((length % 8) == 7)
 334   3              length++;
 335   3            
 336   3            if(length >= 7){
 337   4              unsigned char i;
 338   4              for(i = 0; i < 7; i++)
 339   4                usb_tx_buffer[i + 3] = buffer[i];
 340   4              buffer += 7;
 341   4              usb_calc_crc16(8);
 342   4              usb_tx_count = 12;
 343   4              length -= 7;
 344   4            }
 345   3            else{
 346   4              unsigned char i;
 347   4              for(i = 3; i < (length + 3); i++)
 348   4                usb_tx_buffer[i] = *buffer++;
 349   4              usb_calc_crc16(length + 1);
 350   4              usb_tx_count = length + 5;
 351   4              length = 0;
 352   4            }
 353   3          }
 354   2          else if(length >= 8){
 355   3            unsigned char i;
 356   3            for(i = 0; i < 8; i++)
 357   3              usb_tx_buffer[i + 2] = buffer[i];
 358   3            buffer += 8;
 359   3            usb_calc_crc16(8);
 360   3            usb_tx_count = 12;
 361   3            length -= 8;
 362   3          }
 363   2          else{
 364   3            unsigned char data i;
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 7   

 365   3            for(i = 2; i < (length + 2); i++)
 366   3              usb_tx_buffer[i] = *buffer++;
 367   3            usb_calc_crc16(length);
 368   3            usb_tx_count = length + 4;
 369   3            length = 0;
 370   3          }
 371   2          
 372   2          timeStart = USB_TimerTick;
 373   2          while(usb_tx_count){
 374   3            if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 375   4              usb_tx_count = 0;
 376   4              return;
 377   4            }
 378   3          }
 379   2          
 380   2        }
 381   1        TR0 = 0;
 382   1      }
 383          
 384          static void USB_SendNull() reentrant {
 385   1        unsigned int timeStart;
 386   1        usb.state = USB_STATE_IN;
 387   1        usb_tx_buffer[0] = 0x80;
 388   1        usb_tx_buffer[1] = USB_PID_DATA1;
 389   1        usb_tx_buffer[2] = 0;
 390   1        usb_tx_buffer[3] = 0;
 391   1        usb_tx_count = 4;
 392   1        
 393   1        timeStart = USB_TimerTick;
 394   1        while(usb_tx_count){
 395   2          if(usb.state != USB_STATE_IN){
 396   3            usb_tx_count = 0;
 397   3            return;
 398   3          }
 399   2          if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 400   3            usb_tx_count = 0;
 401   3            return;
 402   3          }
 403   2        }
 404   1      }
 405          
 406          static void usb_send_stall() {
 407   1        usb_tx_buffer[0] = 0x80;
 408   1        usb_tx_buffer[1] = USB_PID_STALL;
 409   1        usb_tx_count = 2;
 410   1      }
 411          
 412          void USB_Process() {
 413   1        extern void usb_exit_process();
 414   1        if(usb.event == USB_EVENT_RECEIVE_SETUP_DATA){
 415   2          usb.event = USB_EVENT_NO;
 416   2          if(rx_buffer[2] == USBRQ_STD_FROM_DEVICE){
 417   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR){
 418   4              switch (rx_buffer[5]){
 419   5              case USBDESCR_DEVICE:
 420   5                USB_SendData((unsigned char *)usb_device_descriptor, ARRAY_LENGHT(usb_device_descriptor), 1);
 421   5                break;
 422   5              case USBDESCR_CONFIG:
 423   5                if(rx_buffer[8] < ARRAY_LENGHT(usb_configuration_descriptor))
 424   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, rx_buffer[8], 1);
 425   5                else
 426   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, ARRAY_LENGHT(usb_configuration_descripto
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 8   

             -r), 1);
 427   5                break;
 428   5              case USBDESCR_STRING:
 429   5                if(rx_buffer[4] == 0)
 430   5                  USB_SendData((unsigned char *)usb_string_descriptor_language, ARRAY_LENGHT(usb_string_descriptor_lan
             -guage), 1);
 431   5                else if(rx_buffer[4] == 1)
 432   5                  USB_SendData((unsigned char *)usb_string_descriptor_vendor, ARRAY_LENGHT(usb_string_descriptor_vendo
             -r), 1);
 433   5                else if(rx_buffer[4] == 2)
 434   5                  USB_SendData((unsigned char *)usb_string_descriptor_device, ARRAY_LENGHT(usb_string_descriptor_devic
             -e), 1);
 435   5                else if(rx_buffer[4] == 3)
 436   5                  USB_SendData((unsigned char *)usb_string_descriptor_serial, ARRAY_LENGHT(usb_string_descriptor_seria
             -l), 1);
 437   5                USB_SendNull();
 438   5                break;
 439   5              default:
 440   5                  break;
 441   5              }
 442   4            }
 443   3            else if(rx_buffer[3] == USBRQ_GET_STATUS){
 444   4              usb_send_stall();
 445   4            }
 446   3          }
 447   2          else if(rx_buffer[2] == USBRQ_STD_TO_DEVICE){
 448   3            switch (rx_buffer[3]){
 449   4              case USBRQ_SET_ADDRESS:
 450   4                if(usb.device_address != 0){
 451   5                  //
 452   5                }
 453   4                USB_SendNull();
 454   4                usb.device_address = rx_buffer[4];
 455   4                break;
 456   4              case (USBRQ_SET_CONFIGURATION):
 457   4                USB_SendNull();
 458   4                break;
 459   4            }
 460   3          }
 461   2          else if (rx_buffer[2] == USBRQ_STD_FROM_INTERFACE){
 462   3            if (rx_buffer[3] == USBRQ_GET_DESCRIPTOR)
 463   3              USB_SendData((unsigned char *)usb_report_descriptor, ARRAY_LENGHT(usb_report_descriptor), 1);
 464   3          }
 465   2          else if (rx_buffer[2] == USBRQ_CLASS_TO_INTERFACE){
 466   3            if(rx_buffer[3] == 0x0A)
 467   3              usb_send_stall();
 468   3          }
 469   2          else if(rx_buffer[2] == USBRQ_CLASS_FROM_INTERFACE)
 470   2            USB_SendData((unsigned char *)usb_report_null, ARRAY_LENGHT(usb_report_null), 1);
 471   2        }
 472   1        if(usb.received){
 473   2          extern void USB_Received(unsigned char *buffer, unsigned char length) reentrant;
 474   2          unsigned int xdata timeStart;
 475   2          usb.ack = 0;
 476   2          USB_SendNull();
 477   2          timeStart = USB_TimerTick;
 478   2          usb.received = 0;
 479   2          usb.event = USB_EVENT_NO;
 480   2          while(!usb.ack){
 481   3            if((unsigned int)(USB_TimerTick - timeStart) > 5)
 482   3              usb_exit_process();
 483   3          }
C51 COMPILER V9.59.0.0   USB                                                               08/15/2019 08:07:47 PAGE 9   

 484   2          USB_Received(usb_data, usb.wLength);
 485   2        }
 486   1        usb_exit_process();
 487   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2280    ----
   CONSTANT SIZE    =    709    ----
   XDATA SIZE       =    285       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
