C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE USB
OBJECT MODULE PLACED IN .\Objects\usb.obj
COMPILER INVOKED BY: C:\Program Files\Keil C\C51\C51\BIN\C51.EXE USB\Src\usb.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Us
                    -er\Inc;.\Drivers\Inc;.\USB\Inc) DEBUG PRINT(.\Listings\usb.lst) TABS(2) OBJECT(.\Objects\usb.obj)

line level    source

   1          
   2          // Written By : Thanh Tung
   3          // E-Mail     : electricthanhtung@gmail.com
   4          // Facebook   : https://www.facebook.com/electricthanhtung
   5          
   6          #include "main.h"
   7          #include "usb.h"
   8          #include "usb_desc.h"
   9          
  10          volatile unsigned char data usb_rx_buffer[12];
  11          volatile unsigned char xdata usb_tx_buffer[12];
  12          volatile unsigned char data usb_tx_count = 0, usb_rx_count = 0;
  13          volatile unsigned char data UEPF = 1, UDRF = 1;
  14          volatile unsigned int xdata USB_TimerTick = 0;    // 20ms
  15          static volatile unsigned char xdata rx_buffer[250];
  16          static unsigned char xdata data_sync;
  17          
  18          static data struct usb_type{
  19            volatile unsigned char state;
  20            volatile unsigned char event;
  21            volatile unsigned char device_address;
  22            
  23            volatile unsigned char received;
  24            volatile unsigned char ack;
  25            
  26            unsigned char endpoint;
  27            unsigned char setup_endpoint;
  28            
  29            volatile unsigned int wLength;
  30          } usb = {0, 0, 0, 0, 0, 0, 0, 0xFF};
  31          
  32          extern void usb_send_ack();
  33          extern void usb_send_nack();
  34          
  35          static void usb_send_answer(){
  36   1        extern void usb_tx();
  37   1        P3 = (P3 & 0xFC) | 0x01;
  38   1        P3M0 |= 0x03;
  39   1        P3M1 &= ~0x03;
  40   1        usb_tx();
  41   1        P3M0 &= ~0x03;
  42   1        P3M1 |= 0x03;
  43   1      }
  44          
  45          static void usb_received_reentrant() reentrant {
  46   1        static unsigned char data data_count = 0, pid_data_old;
  47   1        UDRF = 0;
  48   1        if(usb_rx_buffer[1] == USB_PID_OUT){
  49   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  50   2          if((address == usb.device_address) || (address == 0)){
  51   3            usb.state = USB_STATE_OUT;
  52   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  53   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  54   3          }
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 2   

  55   2        }
  56   1        else if(usb_rx_buffer[1] == USB_PID_SETUP){
  57   2          //usb.state = USB_STATE_SETUP;
  58   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  59   2          if((address == usb.device_address) || (address == 0)){
  60   3            usb.state = USB_STATE_SETUP;
  61   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  62   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  63   3          }
  64   2          return;
  65   2        }
  66   1        else switch(usb_rx_buffer[1]){
  67   2        case USB_PID_IN:{
  68   3          unsigned char address = usb_rx_buffer[2] & 0x7F;
  69   3          if((address != usb.device_address) && (address != 0))
  70   3            return;
  71   3          if(usb_tx_count){
  72   4            usb_send_answer();
  73   4            usb_tx_count = 0;
  74   4          }
  75   3      //    if(usb.event == USB_EVENT_READY_DATA_IN){
  76   3      //      usb_send_answer();
  77   3      //      usb.event = USB_EVENT_WAIT_DATA_IN;
  78   3      //    }
  79   3          else
  80   3            usb_send_nack();
  81   3          break;
  82   3        }
  83   2        case USB_PID_DATA0:{
  84   3          if(usb.state == USB_STATE_OUT){
  85   4            if(pid_data_old == USB_PID_DATA1){
  86   5              unsigned char xdata *buffer = &rx_buffer[data_count];
  87   5              buffer[0] = usb_rx_buffer[2];
  88   5              buffer[1] = usb_rx_buffer[3];
  89   5              buffer[2] = usb_rx_buffer[4];
  90   5              buffer[3] = usb_rx_buffer[5];
  91   5              buffer[4] = usb_rx_buffer[6];
  92   5              buffer[5] = usb_rx_buffer[7];
  93   5              buffer[6] = usb_rx_buffer[8];
  94   5              buffer[7] = usb_rx_buffer[9];
  95   5              usb_send_ack();
  96   5              data_count += 8;
  97   5              if(data_count >= usb.wLength){
  98   6                usb.received = 1;
  99   6                usb_tx_count = 0;
 100   6                UDRF = 1;
 101   6              }
 102   5              pid_data_old = USB_PID_DATA0;
 103   5            }
 104   4            else{
 105   5              delay_us(1);
 106   5              usb_send_ack();
 107   5            }
 108   4            usb.event = USB_EVENT_NO;
 109   4          }
 110   3          else if(usb.state == USB_STATE_SETUP){
 111   4            rx_buffer[2] = usb_rx_buffer[2];
 112   4            rx_buffer[3] = usb_rx_buffer[3];
 113   4            rx_buffer[4] = usb_rx_buffer[4];
 114   4            rx_buffer[5] = usb_rx_buffer[5];
 115   4            rx_buffer[6] = usb_rx_buffer[6];
 116   4            rx_buffer[7] = usb_rx_buffer[7];
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 3   

 117   4            rx_buffer[8] = usb_rx_buffer[8];
 118   4            pid_data_old = USB_PID_DATA0;
 119   4            data_count = 0;
 120   4            usb.event = USB_EVENT_RECEIVE_SETUP_DATA;
 121   4            UDRF = 1;
 122   4            usb_send_ack();
 123   4            
 124   4      //      wLength = usb_rx_buffer[9];
 125   4      //      wLength = (wLength << 8) | usb_rx_buffer[8];
 126   4            
 127   4            usb.wLength = usb_rx_buffer[8];
 128   4          }
 129   3          break;
 130   3        }
 131   2        case USB_PID_DATA1:
 132   2          if (usb.state == USB_STATE_OUT){
 133   3            if(usb_rx_count > 4){
 134   4              if(pid_data_old == USB_PID_DATA0){
 135   5                unsigned char xdata *buffer = &rx_buffer[data_count];
 136   5                buffer[0] = usb_rx_buffer[2];
 137   5                buffer[1] = usb_rx_buffer[3];
 138   5                buffer[2] = usb_rx_buffer[4];
 139   5                buffer[3] = usb_rx_buffer[5];
 140   5                buffer[4] = usb_rx_buffer[6];
 141   5                buffer[5] = usb_rx_buffer[7];
 142   5                buffer[6] = usb_rx_buffer[8];
 143   5                buffer[7] = usb_rx_buffer[9];
 144   5                usb_send_ack();
 145   5                data_count += 8;
 146   5                if(data_count >= usb.wLength){
 147   6                  usb.received = 1;
 148   6                  usb_tx_count = 0;
 149   6                  UDRF = 1;
 150   6                }
 151   5                pid_data_old = USB_PID_DATA1;
 152   5              }
 153   4              else{
 154   5                delay_us(1);
 155   5                usb_send_ack();
 156   5              }
 157   4              usb.event = USB_EVENT_NO;
 158   4            }
 159   3            else{
 160   4              usb_tx_count = 0;
 161   4              delay_us(1);
 162   4              usb_send_ack();
 163   4            }
 164   3          }
 165   2          break;
 166   2        case USB_PID_ACK:
 167   2          usb.ack = 1;
 168   2          break;
 169   2        case USB_PID_NACK:
 170   2          break;
 171   2        default:
 172   2          usb.state = USB_STATE_IDLE;
 173   2          break;
 174   2        }
 175   1      }
 176          
 177          void usb_received() {
 178   1        usb_received_reentrant();
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 4   

 179   1      }
 180          
 181          static const unsigned char code usb_report_null[] = {
 182            0x00,
 183            0x00,
 184            0x00,
 185            0x00,
 186            0x00,
 187            0x00,
 188            0x00,
 189            0x00,
 190          };
 191          
 192          static const unsigned char code usb_string_descriptor_language[] = {
 193            4,
 194            USBDESCR_STRING,
 195            0x09, 0x04,
 196          };
 197          
 198          const unsigned int code table[] = {
 199            0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
 200            0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
 201            0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
 202            0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
 203            0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
 204            0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
 205            0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
 206            0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
 207            0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
 208            0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
 209            0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
 210            0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
 211            0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
 212            0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
 213            0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
 214            0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
 215            0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
 216            0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
 217            0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
 218            0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
 219            0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
 220            0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
 221            0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
 222            0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
 223            0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
 224            0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
 225            0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
 226            0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
 227            0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
 228            0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
 229            0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
 230            0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
 231          };
 232          
 233          void usb_calc_crc16(unsigned char length) reentrant {
 234   1        unsigned int crc = 0xFFFF;
 235   1        unsigned char i = 2;
 236   1        while(length--){
 237   2          crc = table[(crc ^ usb_tx_buffer[i]) & 0xFF] ^ (crc >> 8);
 238   2          i++;
 239   2        }
 240   1        crc = ~crc;
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 5   

 241   1        usb_tx_buffer[i] = crc;
 242   1        usb_tx_buffer[i + 1] = crc >> 8;
 243   1      }
 244          
 245          //static void usb_calc_crc16(unsigned char length){
 246          //  unsigned int data crc = 0xFFFF;
 247          //  unsigned char data index;
 248          //  for(index = 0; index < length; index++){
 249          //    unsigned char data i;
 250          //    crc ^= usb_tx_buffer[index + 2];
 251          //    for (i = 8; i--;){
 252          //      if (crc & 0x01){
 253          //        crc >>= 1;
 254          //        crc ^= 0xA001;
 255          //      }
 256          //      else
 257          //        crc >>= 1;
 258          //    }
 259          //  }
 260          //  crc = ~crc;
 261          //  usb_tx_buffer[index + 2] = (unsigned char)crc;
 262          //  usb_tx_buffer[index + 3] = (unsigned char)(crc >> 8);
 263          //}
 264          
 265          void USB_SendData(unsigned char *buffer, unsigned char length) reentrant {
 266   1        unsigned int timeStart;
 267   1        
 268   1        usb_tx_buffer[0] = 0x80;
 269   1        data_sync = USB_PID_DATA1;
 270   1        while (length > 0){
 271   2          usb_tx_buffer[1] = data_sync;
 272   2          if (data_sync == USB_PID_DATA1)
 273   2            data_sync = USB_PID_DATA0;
 274   2          else
 275   2            data_sync = USB_PID_DATA1;
 276   2          if(length >= 8){
 277   3            unsigned char i;
 278   3            for(i = 0; i < 8; i++)
 279   3              usb_tx_buffer[i + 2] = buffer[i];
 280   3            buffer += 8;
 281   3            usb_calc_crc16(8);
 282   3            usb_tx_count = 12;
 283   3            length -= 8;
 284   3          }
 285   2          else{
 286   3            unsigned char i;
 287   3            for(i = 2; i < (length + 2); i++)
 288   3              usb_tx_buffer[i] = *buffer++;
 289   3            usb_calc_crc16(length);
 290   3            usb_tx_count = length + 4;
 291   3            length = 0;
 292   3          }
 293   2          
 294   2          timeStart = USB_TimerTick;
 295   2          while(usb_tx_count){
 296   3            if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 297   4              usb_tx_count = 0;
 298   4              return;
 299   4            }
 300   3          }
 301   2          
 302   2      //    usb.event = USB_EVENT_READY_DATA_IN;
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 6   

 303   2      //    while(usb.event != USB_EVENT_WAIT_DATA_IN);
 304   2        }
 305   1      }
 306          
 307          void USB_WriteBuf(unsigned char *buffer, unsigned char length) reentrant {
 308   1        unsigned char start = 0;
 309   1        unsigned int timeStart;
 310   1        usb_tx_buffer[0] = 0x80;
 311   1        data_sync = USB_PID_DATA1;
 312   1        while (length > 0){
 313   2          usb_tx_buffer[1] = data_sync;
 314   2          if (data_sync == USB_PID_DATA1)
 315   2            data_sync = USB_PID_DATA0;
 316   2          else
 317   2            data_sync = USB_PID_DATA1;
 318   2          
 319   2          if(!start){
 320   3            start = 1;
 321   3            usb_tx_buffer[2] = length;
 322   3            
 323   3            if((length % 8) == 7)
 324   3              length++;
 325   3            
 326   3            if(length >= 7){
 327   4              unsigned char i;
 328   4              for(i = 0; i < 7; i++)
 329   4                usb_tx_buffer[i + 3] = buffer[i];
 330   4              buffer += 7;
 331   4              usb_calc_crc16(8);
 332   4              usb_tx_count = 12;
 333   4              length -= 7;
 334   4            }
 335   3            else{
 336   4              unsigned char i;
 337   4              for(i = 3; i < (length + 3); i++)
 338   4                usb_tx_buffer[i] = *buffer++;
 339   4              usb_calc_crc16(length + 1);
 340   4              usb_tx_count = length + 5;
 341   4              length = 0;
 342   4            }
 343   3          }
 344   2          else if(length >= 8){
 345   3            unsigned char i;
 346   3            for(i = 0; i < 8; i++)
 347   3              usb_tx_buffer[i + 2] = buffer[i];
 348   3            buffer += 8;
 349   3            usb_calc_crc16(8);
 350   3            usb_tx_count = 12;
 351   3            length -= 8;
 352   3          }
 353   2          else{
 354   3            unsigned char data i;
 355   3            for(i = 2; i < (length + 2); i++)
 356   3              usb_tx_buffer[i] = *buffer++;
 357   3            usb_calc_crc16(length);
 358   3            usb_tx_count = length + 4;
 359   3            length = 0;
 360   3          }
 361   2          
 362   2          timeStart = USB_TimerTick;
 363   2          while(usb_tx_count){
 364   3            if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 7   

 365   4              usb_tx_count = 0;
 366   4              return;
 367   4            }
 368   3          }
 369   2          
 370   2        }
 371   1        TR0 = 0;
 372   1      }
 373          
 374          static void USB_SendNull(unsigned char PID_DATA) reentrant {
 375   1        unsigned int timeStart;
 376   1        usb_tx_buffer[0] = 0x80;
 377   1        usb_tx_buffer[1] = PID_DATA;
 378   1        usb_tx_buffer[2] = 0;
 379   1        usb_tx_buffer[3] = 0;
 380   1        usb_tx_count = 4;
 381   1        
 382   1        timeStart = USB_TimerTick;
 383   1        while(usb_tx_count){
 384   2          if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 385   3            usb_tx_count = 0;
 386   3            return;
 387   3          }
 388   2        }
 389   1      }
 390          
 391          static void usb_send_stall() {
 392   1        usb_tx_buffer[0] = 0x80;
 393   1        usb_tx_buffer[1] = USB_PID_STALL;
 394   1        usb_tx_count = 2;
 395   1      }
 396          
 397          void USB_Process() {
 398   1        if(usb.event == USB_EVENT_RECEIVE_SETUP_DATA){
 399   2          usb.event = USB_EVENT_NO;
 400   2          if(rx_buffer[2] == USBRQ_STD_FROM_DEVICE){
 401   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR){
 402   4              switch(rx_buffer[5]){
 403   5              case USBDESCR_DEVICE:
 404   5                USB_SendData((unsigned char *)usb_device_descriptor, ARRAY_LENGHT(usb_device_descriptor));
 405   5                break;
 406   5              case USBDESCR_CONFIG:
 407   5                if(rx_buffer[8] < ARRAY_LENGHT(usb_configuration_descriptor))
 408   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, rx_buffer[8]);
 409   5                else
 410   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, ARRAY_LENGHT(usb_configuration_descripto
             -r));
 411   5                break;
 412   5              case USBDESCR_STRING:
 413   5                if(rx_buffer[4] == 0){
 414   6                  USB_SendData((unsigned char *)usb_string_descriptor_language, ARRAY_LENGHT(usb_string_descriptor_lan
             -guage));
 415   6                  USB_SendNull(data_sync);
 416   6                }
 417   5                else if(rx_buffer[4] == 1){
 418   6                  USB_SendData((unsigned char *)usb_string_descriptor_vendor, ARRAY_LENGHT(usb_string_descriptor_vendo
             -r));
 419   6                  USB_SendNull(data_sync);
 420   6                }
 421   5                else if(rx_buffer[4] == 2){
 422   6                  USB_SendData((unsigned char *)usb_string_descriptor_device, ARRAY_LENGHT(usb_string_descriptor_devic
             -e));
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 8   

 423   6                  USB_SendNull(data_sync);
 424   6                }
 425   5                else if(rx_buffer[4] == 3){
 426   6                  USB_SendData((unsigned char *)usb_string_descriptor_serial, ARRAY_LENGHT(usb_string_descriptor_seria
             -l));
 427   6                  USB_SendNull(data_sync);
 428   6                }
 429   5                else
 430   5                  USB_SendNull(USB_PID_DATA1);
 431   5                break;
 432   5              default:
 433   5                  break;
 434   5              }
 435   4            }
 436   3            else if(rx_buffer[3] == USBRQ_GET_STATUS){
 437   4              usb_send_stall();
 438   4            }
 439   3          }
 440   2          else if(rx_buffer[2] == USBRQ_STD_TO_DEVICE){
 441   3            switch(rx_buffer[3]){
 442   4              case USBRQ_SET_ADDRESS:
 443   4                if(usb.device_address != 0){
 444   5                  //
 445   5                }
 446   4                USB_SendNull(USB_PID_DATA1);
 447   4                usb.device_address = rx_buffer[4];
 448   4                break;
 449   4              case (USBRQ_SET_CONFIGURATION):
 450   4                USB_SendNull(USB_PID_DATA1);
 451   4                break;
 452   4            }
 453   3          }
 454   2          else if (rx_buffer[2] == USBRQ_STD_FROM_INTERFACE){
 455   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR)
 456   3              USB_SendData((unsigned char *)usb_report_descriptor, ARRAY_LENGHT(usb_report_descriptor));
 457   3          }
 458   2          else if(rx_buffer[2] == USBRQ_CLASS_TO_INTERFACE){
 459   3            if(rx_buffer[3] == 0x0A)
 460   3              usb_send_stall();
 461   3          }
 462   2          else if(rx_buffer[2] == USBRQ_CLASS_FROM_INTERFACE)
 463   2            USB_SendData((unsigned char *)usb_report_null, ARRAY_LENGHT(usb_report_null));
 464   2        }
 465   1        if(usb.received){
 466   2          extern void USB_Received(unsigned char endpoint, unsigned char *buffer, unsigned char length) reentrant;
 467   2          unsigned int xdata timeStart;
 468   2          usb.ack = 0;
 469   2          USB_SendNull(USB_PID_DATA1);
 470   2          timeStart = USB_TimerTick;
 471   2          usb.received = 0;
 472   2          usb.event = USB_EVENT_NO;
 473   2          while(!usb.ack){
 474   3            if((unsigned int)(USB_TimerTick - timeStart) > 5)
 475   3              return;
 476   3          }
 477   2          USB_Received(usb.endpoint, rx_buffer, usb.wLength);
 478   2        }
 479   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2254    ----
C51 COMPILER V9.59.0.0   USB                                                               08/29/2019 10:30:21 PAGE 9   

   CONSTANT SIZE    =    709    ----
   XDATA SIZE       =    265       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
