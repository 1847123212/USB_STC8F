C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE USB
OBJECT MODULE PLACED IN .\Objects\usb.obj
COMPILER INVOKED BY: C:\Program Files\Keil C\C51\C51\BIN\C51.EXE USB\Src\usb.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Us
                    -er\Inc;.\Drivers\Inc;.\USB\Inc) DEBUG PRINT(.\Listings\usb.lst) TABS(2) OBJECT(.\Objects\usb.obj)

line level    source

   1          
   2          // Written By : Thanh Tung
   3          // E-Mail     : electricthanhtung@gmail.com
   4          // Facebook   : https://www.facebook.com/electricthanhtung
   5          
   6          #include "main.h"
   7          #include "usb.h"
   8          #include "usb_desc.h"
   9          
  10          volatile unsigned char data usb_rx_buffer[12];
  11          volatile unsigned char xdata usb_tx_buffer[12];
  12          volatile unsigned char data usb_tx_count = 0, usb_rx_count = 0;
  13          volatile unsigned char data UEPF = 1, UDRF = 1;
  14          volatile unsigned int xdata USB_TimerTick = 0;    // 20ms
  15          static volatile unsigned char xdata rx_buffer[250];
  16          static unsigned char xdata data_sync;
  17          
  18          static data struct usb_type{
  19            volatile unsigned char state;
  20            volatile unsigned char event;
  21            volatile unsigned char device_address;
  22            
  23            volatile unsigned char received;
  24            volatile unsigned char ack;
  25            
  26            unsigned char endpoint;
  27            unsigned char setup_endpoint;
  28            
  29            volatile unsigned int wLength;
  30          } usb = {0, 0, 0, 0, 0, 0, 0, 0xFF};
  31          
  32          extern void usb_send_ack();
  33          extern void usb_send_nack();
  34          
  35          static void usb_send_answer(){
  36   1        extern void usb_tx();
  37   1        P3 = (P3 & 0xFC) | 0x01;
  38   1        P3M0 |= 0x03;
  39   1        P3M1 &= ~0x03;
  40   1        usb_tx();
  41   1        P3M0 &= ~0x03;
  42   1        P3M1 |= 0x03;
  43   1      }
  44          
  45          static void usb_received_reentrant() reentrant {
  46   1        static unsigned char data data_count = 0, pid_data_old;
  47   1        UDRF = 0;
  48   1        if(usb_rx_buffer[1] == USB_PID_OUT){
  49   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  50   2          if((address == usb.device_address) || (address == 0)){
  51   3            usb.state = USB_STATE_OUT;
  52   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  53   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  54   3          }
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 2   

  55   2        }
  56   1        else if(usb_rx_buffer[1] == USB_PID_SETUP){
  57   2          //usb.state = USB_STATE_SETUP;
  58   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  59   2          if((address == usb.device_address) || (address == 0)){
  60   3            usb.state = USB_STATE_SETUP;
  61   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  62   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  63   3          }
  64   2          return;
  65   2        }
  66   1        else switch(usb_rx_buffer[1]){
  67   2        case USB_PID_IN:{
  68   3          unsigned char address = usb_rx_buffer[2] & 0x7F;
  69   3          if((address != usb.device_address) && (address != 0))
  70   3            return;
  71   3          if(usb_tx_count){
  72   4            usb_send_answer();
  73   4            usb_tx_count = 0;
  74   4          }
  75   3      //    if(usb.event == USB_EVENT_READY_DATA_IN){
  76   3      //      usb_send_answer();
  77   3      //      usb.event = USB_EVENT_WAIT_DATA_IN;
  78   3      //    }
  79   3          else
  80   3            usb_send_nack();
  81   3          usb.state = USB_STATE_IN;
  82   3          break;
  83   3        }
  84   2        case USB_PID_DATA0:{
  85   3          if(usb.state == USB_STATE_OUT){
  86   4            if(pid_data_old == USB_PID_DATA1){
  87   5              unsigned char xdata *buffer = &rx_buffer[data_count];
  88   5              buffer[0] = usb_rx_buffer[2];
  89   5              buffer[1] = usb_rx_buffer[3];
  90   5              buffer[2] = usb_rx_buffer[4];
  91   5              buffer[3] = usb_rx_buffer[5];
  92   5              buffer[4] = usb_rx_buffer[6];
  93   5              buffer[5] = usb_rx_buffer[7];
  94   5              buffer[6] = usb_rx_buffer[8];
  95   5              buffer[7] = usb_rx_buffer[9];
  96   5              usb_send_ack();
  97   5              data_count += 8;
  98   5              if(data_count >= usb.wLength){
  99   6                usb.received = 1;
 100   6                usb_tx_count = 0;
 101   6                UDRF = 1;
 102   6              }
 103   5              pid_data_old = USB_PID_DATA0;
 104   5            }
 105   4            else{
 106   5              delay_us(1);
 107   5              usb_send_ack();
 108   5            }
 109   4            usb.event = USB_EVENT_NO;
 110   4          }
 111   3          else if(usb.state == USB_STATE_SETUP || usb.state == USB_STATE_IN){
 112   4            rx_buffer[2] = usb_rx_buffer[2];
 113   4            rx_buffer[3] = usb_rx_buffer[3];
 114   4            rx_buffer[4] = usb_rx_buffer[4];
 115   4            rx_buffer[5] = usb_rx_buffer[5];
 116   4            rx_buffer[6] = usb_rx_buffer[6];
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 3   

 117   4            rx_buffer[7] = usb_rx_buffer[7];
 118   4            rx_buffer[8] = usb_rx_buffer[8];
 119   4            pid_data_old = USB_PID_DATA0;
 120   4            data_count = 0;
 121   4            usb.event = USB_EVENT_RECEIVE_SETUP_DATA;
 122   4            if((usb_rx_buffer[2] == 0x21) && (usb_rx_buffer[3] == 0x09))
 123   4              UDRF = 0;
 124   4            else
 125   4              UDRF = 1;
 126   4            //UDRF = 1;
 127   4            usb_send_ack();
 128   4            
 129   4      //      wLength = usb_rx_buffer[9];
 130   4      //      wLength = (wLength << 8) | usb_rx_buffer[8];
 131   4            
 132   4            usb.wLength = usb_rx_buffer[8];
 133   4          }
 134   3          break;
 135   3        }
 136   2        case USB_PID_DATA1:
 137   2          if (usb.state == USB_STATE_OUT){
 138   3            if(usb_rx_count > 4){
 139   4              if(pid_data_old == USB_PID_DATA0){
 140   5                unsigned char xdata *buffer = &rx_buffer[data_count];
 141   5                buffer[0] = usb_rx_buffer[2];
 142   5                buffer[1] = usb_rx_buffer[3];
 143   5                buffer[2] = usb_rx_buffer[4];
 144   5                buffer[3] = usb_rx_buffer[5];
 145   5                buffer[4] = usb_rx_buffer[6];
 146   5                buffer[5] = usb_rx_buffer[7];
 147   5                buffer[6] = usb_rx_buffer[8];
 148   5                buffer[7] = usb_rx_buffer[9];
 149   5                usb_send_ack();
 150   5                data_count += 8;
 151   5                if(data_count >= usb.wLength){
 152   6                  usb.received = 1;
 153   6                  usb_tx_count = 0;
 154   6                  UDRF = 1;
 155   6                }
 156   5                pid_data_old = USB_PID_DATA1;
 157   5              }
 158   4              else{
 159   5                delay_us(1);
 160   5                usb_send_ack();
 161   5              }
 162   4              usb.event = USB_EVENT_NO;
 163   4            }
 164   3            else{
 165   4              usb_tx_count = 0;
 166   4              delay_us(1);
 167   4              usb_send_ack();
 168   4            }
 169   3          }
 170   2          break;
 171   2        case USB_PID_ACK:
 172   2          usb.ack = 1;
 173   2          break;
 174   2        case USB_PID_NACK:
 175   2          break;
 176   2        default:
 177   2          usb.state = USB_STATE_IDLE;
 178   2          break;
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 4   

 179   2        }
 180   1      }
 181          
 182          void usb_received() {
 183   1        usb_received_reentrant();
 184   1      }
 185          
 186          static const unsigned char code usb_report_null[] = {
 187            0x00,
 188            0x00,
 189            0x00,
 190            0x00,
 191            0x00,
 192            0x00,
 193            0x00,
 194            0x00,
 195          };
 196          
 197          static const unsigned char code usb_string_descriptor_language[] = {
 198            4,
 199            USBDESCR_STRING,
 200            0x09, 0x04,
 201          };
 202          
 203          const unsigned int code table[] = {
 204            0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
 205            0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
 206            0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
 207            0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
 208            0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
 209            0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
 210            0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
 211            0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
 212            0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
 213            0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
 214            0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
 215            0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
 216            0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
 217            0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
 218            0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
 219            0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
 220            0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
 221            0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
 222            0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
 223            0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
 224            0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
 225            0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
 226            0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
 227            0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
 228            0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
 229            0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
 230            0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
 231            0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
 232            0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
 233            0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
 234            0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
 235            0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
 236          };
 237          
 238          void usb_calc_crc16(unsigned char length) reentrant {
 239   1        unsigned int crc = 0xFFFF;
 240   1        unsigned char i = 2;
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 5   

 241   1        while(length--){
 242   2          crc = table[(crc ^ usb_tx_buffer[i]) & 0xFF] ^ (crc >> 8);
 243   2          i++;
 244   2        }
 245   1        crc = ~crc;
 246   1        usb_tx_buffer[i] = crc;
 247   1        usb_tx_buffer[i + 1] = crc >> 8;
 248   1      }
 249          
 250          //static void usb_calc_crc16(unsigned char length){
 251          //  unsigned int data crc = 0xFFFF;
 252          //  unsigned char data index;
 253          //  for(index = 0; index < length; index++){
 254          //    unsigned char data i;
 255          //    crc ^= usb_tx_buffer[index + 2];
 256          //    for (i = 8; i--;){
 257          //      if (crc & 0x01){
 258          //        crc >>= 1;
 259          //        crc ^= 0xA001;
 260          //      }
 261          //      else
 262          //        crc >>= 1;
 263          //    }
 264          //  }
 265          //  crc = ~crc;
 266          //  usb_tx_buffer[index + 2] = (unsigned char)crc;
 267          //  usb_tx_buffer[index + 3] = (unsigned char)(crc >> 8);
 268          //}
 269          
 270          void USB_SendData(unsigned char *buffer, unsigned char length) reentrant {
 271   1        unsigned int timeStart;
 272   1        usb.state = USB_STATE_IN;
 273   1        usb_tx_buffer[0] = 0x80;
 274   1        data_sync = USB_PID_DATA1;
 275   1        while (length > 0){
 276   2          usb_tx_buffer[1] = data_sync;
 277   2          if (data_sync == USB_PID_DATA1)
 278   2            data_sync = USB_PID_DATA0;
 279   2          else
 280   2            data_sync = USB_PID_DATA1;
 281   2          if(length >= 8){
 282   3            unsigned char i;
 283   3            for(i = 0; i < 8; i++)
 284   3              usb_tx_buffer[i + 2] = buffer[i];
 285   3            buffer += 8;
 286   3            usb_calc_crc16(8);
 287   3            usb_tx_count = 12;
 288   3            length -= 8;
 289   3          }
 290   2          else{
 291   3            unsigned char i;
 292   3            for(i = 2; i < (length + 2); i++)
 293   3              usb_tx_buffer[i] = *buffer++;
 294   3            usb_calc_crc16(length);
 295   3            usb_tx_count = length + 4;
 296   3            length = 0;
 297   3          }
 298   2          
 299   2          timeStart = USB_TimerTick;
 300   2          while(usb_tx_count){
 301   3            if((usb.state != USB_STATE_IN) || ((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep))){
 302   4              usb_tx_count = 0;
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 6   

 303   4              return;
 304   4            }
 305   3          }
 306   2          
 307   2      //    usb.event = USB_EVENT_READY_DATA_IN;
 308   2      //    while(usb.event != USB_EVENT_WAIT_DATA_IN);
 309   2        }
 310   1      }
 311          
 312          void USB_WriteBuf(unsigned char *buffer, unsigned char length) reentrant {
 313   1        unsigned char start = 0;
 314   1        unsigned int timeStart;
 315   1        usb_tx_buffer[0] = 0x80;
 316   1        data_sync = USB_PID_DATA1;
 317   1        while (length > 0){
 318   2          usb_tx_buffer[1] = data_sync;
 319   2          if (data_sync == USB_PID_DATA1)
 320   2            data_sync = USB_PID_DATA0;
 321   2          else
 322   2            data_sync = USB_PID_DATA1;
 323   2          
 324   2          if(!start){
 325   3            start = 1;
 326   3            usb_tx_buffer[2] = length;
 327   3            
 328   3            if((length % 8) == 7)
 329   3              length++;
 330   3            
 331   3            if(length >= 7){
 332   4              unsigned char i;
 333   4              for(i = 0; i < 7; i++)
 334   4                usb_tx_buffer[i + 3] = buffer[i];
 335   4              buffer += 7;
 336   4              usb_calc_crc16(8);
 337   4              usb_tx_count = 12;
 338   4              length -= 7;
 339   4            }
 340   3            else{
 341   4              unsigned char i;
 342   4              for(i = 3; i < (length + 3); i++)
 343   4                usb_tx_buffer[i] = *buffer++;
 344   4              usb_calc_crc16(length + 1);
 345   4              usb_tx_count = length + 5;
 346   4              length = 0;
 347   4            }
 348   3          }
 349   2          else if(length >= 8){
 350   3            unsigned char i;
 351   3            for(i = 0; i < 8; i++)
 352   3              usb_tx_buffer[i + 2] = buffer[i];
 353   3            buffer += 8;
 354   3            usb_calc_crc16(8);
 355   3            usb_tx_count = 12;
 356   3            length -= 8;
 357   3          }
 358   2          else{
 359   3            unsigned char data i;
 360   3            for(i = 2; i < (length + 2); i++)
 361   3              usb_tx_buffer[i] = *buffer++;
 362   3            usb_calc_crc16(length);
 363   3            usb_tx_count = length + 4;
 364   3            length = 0;
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 7   

 365   3          }
 366   2          
 367   2          timeStart = USB_TimerTick;
 368   2          while(usb_tx_count){
 369   3            if((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 370   4              usb_tx_count = 0;
 371   4              return;
 372   4            }
 373   3          }
 374   2          
 375   2        }
 376   1        TR0 = 0;
 377   1      }
 378          
 379          static void USB_SendNull(unsigned char PID_DATA) reentrant {
 380   1        unsigned int timeStart;
 381   1        usb.state = USB_STATE_IN;
 382   1        usb_tx_buffer[0] = 0x80;
 383   1        usb_tx_buffer[1] = PID_DATA;
 384   1        usb_tx_buffer[2] = 0;
 385   1        usb_tx_buffer[3] = 0;
 386   1        usb_tx_count = 4;
 387   1        
 388   1        timeStart = USB_TimerTick;
 389   1        while(usb_tx_count){
 390   2          if((usb.state != USB_STATE_IN) || ((unsigned int)(USB_TimerTick - timeStart) > (100 / TimerTickStep))){
 391   3            usb_tx_count = 0;
 392   3            return;
 393   3          }
 394   2        }
 395   1      }
 396          
 397          static void usb_send_stall() {
 398   1        usb_tx_buffer[0] = 0x80;
 399   1        usb_tx_buffer[1] = USB_PID_STALL;
 400   1        usb_tx_count = 2;
 401   1      }
 402          
 403          void USB_Process() {
 404   1        if(usb.event == USB_EVENT_RECEIVE_SETUP_DATA){
 405   2          usb.event = USB_EVENT_NO;
 406   2          if(rx_buffer[2] == USBRQ_STD_FROM_DEVICE){
 407   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR){
 408   4              switch(rx_buffer[5]){
 409   5              case USBDESCR_DEVICE:
 410   5                USB_SendData((unsigned char *)usb_device_descriptor, ARRAY_LENGHT(usb_device_descriptor));
 411   5                break;
 412   5              case USBDESCR_CONFIG:
 413   5                if(rx_buffer[8] < ARRAY_LENGHT(usb_configuration_descriptor))
 414   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, rx_buffer[8]);
 415   5                else
 416   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, ARRAY_LENGHT(usb_configuration_descripto
             -r));
 417   5                break;
 418   5              case USBDESCR_STRING:
 419   5                if(rx_buffer[4] == 0){
 420   6                  USB_SendData((unsigned char *)usb_string_descriptor_language, ARRAY_LENGHT(usb_string_descriptor_lan
             -guage));
 421   6                  USB_SendNull(data_sync);
 422   6                }
 423   5                else if(rx_buffer[4] == 1){
 424   6                  USB_SendData((unsigned char *)usb_string_descriptor_vendor, ARRAY_LENGHT(usb_string_descriptor_vendo
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 8   

             -r));
 425   6                  USB_SendNull(data_sync);
 426   6                }
 427   5                else if(rx_buffer[4] == 2){
 428   6                  USB_SendData((unsigned char *)usb_string_descriptor_device, ARRAY_LENGHT(usb_string_descriptor_devic
             -e));
 429   6                  USB_SendNull(data_sync);
 430   6                }
 431   5                else if(rx_buffer[4] == 3){
 432   6                  USB_SendData((unsigned char *)usb_string_descriptor_serial, ARRAY_LENGHT(usb_string_descriptor_seria
             -l));
 433   6                  USB_SendNull(data_sync);
 434   6                }
 435   5                else
 436   5                  USB_SendNull(USB_PID_DATA1);
 437   5                break;
 438   5              default:
 439   5                  break;
 440   5              }
 441   4            }
 442   3            else if(rx_buffer[3] == USBRQ_GET_STATUS){
 443   4              usb_send_stall();
 444   4            }
 445   3          }
 446   2          else if(rx_buffer[2] == USBRQ_STD_TO_DEVICE){
 447   3            switch(rx_buffer[3]){
 448   4              case USBRQ_SET_ADDRESS:
 449   4                if(usb.device_address != 0){
 450   5                  //
 451   5                }
 452   4                USB_SendNull(USB_PID_DATA1);
 453   4                usb.device_address = rx_buffer[4];
 454   4                break;
 455   4              case (USBRQ_SET_CONFIGURATION):
 456   4                USB_SendNull(USB_PID_DATA1);
 457   4                break;
 458   4            }
 459   3          }
 460   2          else if (rx_buffer[2] == USBRQ_STD_FROM_INTERFACE){
 461   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR)
 462   3              USB_SendData((unsigned char *)usb_report_descriptor, ARRAY_LENGHT(usb_report_descriptor));
 463   3          }
 464   2          else if(rx_buffer[2] == USBRQ_CLASS_TO_INTERFACE){
 465   3            if(rx_buffer[3] == 0x0A)
 466   3              usb_send_stall();
 467   3          }
 468   2          else if(rx_buffer[2] == USBRQ_CLASS_FROM_INTERFACE)
 469   2            USB_SendData((unsigned char *)usb_report_null, ARRAY_LENGHT(usb_report_null));
 470   2        }
 471   1        if(usb.received){
 472   2          extern void USB_Received(unsigned char endpoint, unsigned char *buffer, unsigned char length) reentrant;
 473   2          unsigned int xdata timeStart;
 474   2          usb.ack = 0;
 475   2          USB_SendNull(USB_PID_DATA1);
 476   2          timeStart = USB_TimerTick;
 477   2          usb.received = 0;
 478   2          usb.event = USB_EVENT_NO;
 479   2          while(!usb.ack){
 480   3            if((unsigned int)(USB_TimerTick - timeStart) > 5)
 481   3              return;
 482   3          }
 483   2          USB_Received(usb.endpoint, rx_buffer, usb.wLength);
C51 COMPILER V9.59.0.0   USB                                                               09/04/2019 11:14:08 PAGE 9   

 484   2        }
 485   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2298    ----
   CONSTANT SIZE    =    709    ----
   XDATA SIZE       =    265       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
